from telethon import events, Button
from core.bot_client import bot

# Inline-mode helper with bilingual support (AR/EN)

HEADER_AR = (
    "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ\n"
    "โ   ๐ฉ ูุงุฆูุฉ ุฃูุงูุฑ FLEX โ ููููุฒุฉ ูุณููุฉ ุงูุงุณุชุฎุฏุงู ๐ช   โ\n"
    "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ\n"
)
FOOTER_AR = "\nโ ูุณุชูุฏ ุงูุฃูุงูุฑ โข FLEX (Inline) โ\n"

HEADER_EN = (
    "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ\n"
    "โ   ๐ฉ FLEX Commands โ Beautiful and Easy to Use ๐ช   โ\n"
    "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ\n"
)
FOOTER_EN = "\nโ Commands Reference โข FLEX (Inline) โ\n"

SEPARATOR = "\nโโโโโโโโโโโ\n"

COMMANDS_AR = {
    "ุงูุฅุญุตุงุฆูุงุช": [
        (".ุงุญุตุงุฆูุงุชู", "ูุนุฑุถ ุฅุญุตุงุฆูุงุช ุงูุญุณุงุจ: ุงููุณุชุฎุฏูููุ ุงููุฌููุนุงุชุ ุงููููุงุชุ ุงูุจูุชุงุช."),
        (".ูุนูููุงุชู", "ุชูุงุตูู ูุชูุฏูุฉ ุนู ุงูุญุณุงุจ: ุนุฏุฏ ุงููุญุงุฏุซุงุชุ ุงูุจูุชุงุชุ ุงููุฌููุนุงุช ูุงููููุงุช."),
    ],
    "ุงูุชุฎุฒูู": [
        (".ุชูุนูู ุงูุชุฎุฒูู", "ุฅูุดุงุก ูุชูุนูู ูุฑูุจ ุชุฎุฒูู ุฎุงุต ุจุงูุฑุณุงุฆู ุงููุงุฑุฏุฉ ูู ุงูุฎุงุต."),
        (".ุชุนุทูู ุงูุชุฎุฒูู", "ุฅููุงู ุงูุชุฎุฒูู ูุญุฐู ุชุนุฑูู ูุฌููุนุฉ ุงูุชุฎุฒูู ุงููุญููุฉ."),
    ],
    "ุงูุฑุฏูุฏ ุงูุชููุงุฆูุฉ": [
        (".ุงุถู ุฑุฏ + ุงููููุฉ + ุงูุฑุฏ", "ุฅุถุงูุฉ ุฑุฏ ุชููุงุฆู ูููููุฉ ุงููุญุฏุฏุฉ."),
        (".ุงูุฑุฏูุฏ", "ุนุฑุถ ุฌููุน ุงูุฑุฏูุฏ ุงููุฎุฒูุฉ."),
        (".ุชูุนูู ููุง", "ุชูุนูู ุงูุฑุฏูุฏ ุงูุชููุงุฆูุฉ ูู ุงููุฌููุนุฉ ุงูุญุงููุฉ."),
        (".ุชุนุทูู ููุง", "ุชุนุทูู ุงูุฑุฏูุฏ ุงูุชููุงุฆูุฉ ูู ุงููุฌููุนุฉ ุงูุญุงููุฉ."),
    ],
    "ูุถุน ุงูุบูุงุจ ูุงูุฑุฏูุฏ ุงููุฎุตุตุฉ": [
        (".ุชุดุบูู ุงูุฑุฏ", "ุชุดุบูู ุงูุฑุฏ ุงูุชููุงุฆู ููุฎุงุต."),
        (".ุงููุฎุตุต ุชุดุบูู", "ุชุดุบูู ุงูุฑุฏูุฏ ุงููุฎุตุตุฉ ุงููุจููุฉ ุนูู ูุตูุต ูุญุฏุฏุฉ."),
        (".ุชุนุทูู ุงูุฑุฏ", "ุชุนุทูู ุงูุฑุฏ ุงูุชููุงุฆู ูุงูุฑุฏูุฏ ุงููุฎุตุตุฉ."),
        (".ูููุดุฉ ุงูุฑุฏ", "ุชุนููู ุฑุณุงูุฉ ูุญุฏุฏุฉ ูุชููู ูููุดุฉ ุงูุฑุฏ (ุจุงูุฑุฏ ุนูู ุฑุณุงูุฉ)."),
        (".ุฑุฏ <ุงููุต>", "ุฅุถุงูุฉ ุฑุฏ ูุฎุตุต ููุต ูุชู ุงูุฑุฏ ุนููู."),
        (".ุญุฐู ุฑุฏ", "ุญุฐู ุฑุฏ ูุฎุตุต (ุจุงูุฑุฏ ุนูู ูุต ูุถุงู ุณุงุจููุง)."),
        (".ุณูุงุญ", "ุณูุงุญ ูุญุงุฏุซุฉ ุฎุงุตุฉ ูุนููุฉ ูู ูููุฏ ุงูุฑุฏ."),
        (".ุงูุบุงุก ุงูุณูุงุญ", "ุฅูุบุงุก ุงูุณูุงุญ ููุญุงุฏุซุฉ ุฎุงุตุฉ."),
    ],
    "ุงูุฃูุนุงุจ": [
        (".ุณูู [1-6] | ๐ฏ", "ูุนุจุฉ ุงูุณูู. ูููู ุชุญุฏูุฏ ุฑูู ูุทููุจ."),
        (".ูุฑุฏ [1-6] | ๐ฒ", "ูุนุจุฉ ุงููุฑุฏ. ูููู ุชุญุฏูุฏ ุฑูู ูุทููุจ."),
        (".ุณูู [1-5] | ๐", "ูุนุจุฉ ูุฑุฉ ุงูุณูุฉ."),
        (".ูุฑุฉ [1-5] | โฝ๏ธ", "ูุนุจุฉ ูุฑุฉ ุงููุฏู."),
        (".ุญุธ [1-64] | ๐ฐ", "ุขูุฉ ุงูุญุธ."),
        (".gym", "ุนุฑุถ ูุชุญุฑู ุฑูุงุถู ุจุณูุท."),
        (".ุงุญูุงู", "ูุชุญ ูุงุฆูุฉ ูุนุจุฉ ุงูุฃุญูุงู (ุญูู/ุญูููุฉ)."),
        (".ุญูู", "ููููุฏ ุชุญุฏูู/ููููุฉ ุฎูููุฉ ูุนูููุฉ."),
        (".ุญูููุฉ", "ููููุฏ ุณุคุงู ุญูููุฉ ูุญุชุฑู."),
    ],
    "ุงููุณุงุฆุท ูุงูุฃุฏูุงุช": [
        (".ููุชููุจ <ุจุญุซ>", "ุฌูุจ ุฃูู ููุฏูู ูุทุงุจู ูู ููุชููุจ."),
        (".ููุตู", "ุตูุน ููุตู ูู ุตูุฑุฉ/ููุตู ุจุงูุฑุฏ ุนูู ุงููุณุงุฆุท."),
        (".ูุนูููุงุช ุงูููุตู", "ุฌูุจ ูุนูููุงุช ุญุฒูุฉ ุงูููุตูุงุช."),
        (".ุชู <ุฑุงุจุท>", "ุชุญููู ููุฏูู ุชูู ุชูู ุจุฏูู ุนูุงูุฉ ูุงุฆูุฉ."),
    ],
    "ุงูุฐูุงุก ุงูุงุตุทูุงุนู": [
        (".ุฐูุงุก <ูุต/ุจุงูุฑุฏ>", "ุฑุฏ ุฐูู ูุฎุชุตุฑโูุซุงู: .ุฐูุงุก ููู ุญุงูู โ 'ุจุฎูุฑ ุงูุญูุฏ ููู!'."),
        (".ุชุฑุฌู <ูุบุฉ> [ูุต/ุจุงูุฑุฏ]", "ุชุฑุฌูุฉ ุฐููุฉ ุนุจุฑ Google (gpytranslate/deep-translator)."),
        (".ูุดู_ูุบุฉ [ูุต/ุจุงูุฑุฏ]", "ูุดู ูุบุฉ ุงููุต ุชููุงุฆููุง."),
        (".ุชูุฎูุต [ุนุฏุฏ_ุงูุฌูู] (ุจุงูุฑุฏ)", "ุชูุฎูุต ุณุฑูุน ูููุต ุฅูู ุนุฏุฏ ุฌูู ูุญุฏุฏ."),
    ],
    "ุงูุตูุฏ (ููุฒุฑุงุช)": [
        (".ุตูุฏ <ููุท>", "ุจุฏุก ุนูููุฉ ุตูุฏ ููุฒุฑ ููู ุงูููุท ุงููุญุฏุฏ."),
        (".ุญุงูุฉ ุงูุตูุฏ", "ุนุฑุถ ุญุงูุฉ ุงูุตูุฏ ูุนุฏุฏ ุงููุญุงููุงุช."),
        (".ุงููุงู ุงูุตูุฏ", "ุฅููุงู ุนูููุฉ ุงูุตูุฏ ุงูุญุงููุฉ."),
    ],
    "ุงููุฑุงูุจุฉ": [
        (".ูุฑุงูุจุฉ <@user>", "ุจุฏุก ูุฑุงูุจุฉ ุชุบููุฑุงุช ุงูุงุณู/ุงูุตูุฑุฉ/ุงูุจุงูู ูููุณุชุฎุฏู."),
        (".ุงููุงู_ุงููุฑุงูุจุฉ <@user>", "ุฅููุงู ูุฑุงูุจุฉ ุงููุณุชุฎุฏู."),
    ],
    "ุงูููู ุงูุดุฎุตู": [
        (".ุชูุนูู ุงูุงุณู ุงูููุชู", "ุฅุถุงูุฉ ุงูููุช ุชููุงุฆููุง ุฅูู ุงูุงุณู."),
        (".ุชุนุทูู ุงูุงุณู ุงูููุชู", "ุฅููุงู ูุฅุฒุงูุฉ ุงูููุช ูู ุงูุงุณู."),
        (".ุงูุงุณู (ุงูุงุณู)", "ุชุนููู ุงูุงุณู (ูุน ุงูููุช ุงูุญุงูู)."),
        (".ุงูุชุญุงู", "ุงูุชุญุงู ูุณุชุฎุฏู ุชุฑุฏ ุนููู (ุงุณู/ุจุงูู/ุตูุฑุฉ)."),
        (".ุงุฑุฌุงุน", "ุงุณุชุฑุฌุงุน ุงูุงุณู/ุงูุจุงูู/ุงูุตูุฑุฉ ุงูุฃุตููุฉ ุงููุฎุฒูุฉ."),
    ],
    "ุญูุงูุฉ ุงูุฎุงุต ูุงูุชุญุฐูุฑุงุช": [
        (".ุญูุงูุฉ ุงูุฎุงุต", "ุชูุนูู/ุชุนุทูู ุญูุงูุฉ ุงูุฎุงุต ูู ุงููููุงุช ุงูุณูุฆุฉ."),
        (".ูุจูู", "ูุจูู ูุณุชุฎุฏู ูุญุฏุฏ (ุจุงูุฑุฏ) ูุงุณุชุซูุงุฆู ูู ุงูุชุญุฐูุฑุงุช."),
        (".ุงูุบุงุก ุงููุจูู", "ุฅูุบุงุก ูุจูู ูุณุชุฎุฏู (ุจุงูุฑุฏ)."),
        (".ูุณุญ ุงูุชุญุฐูุฑุงุช", "ูุณุญ ุฌููุน ุชุญุฐูุฑุงุช ุงููุณุชุฎุฏู (ุจุงูุฑุฏ)."),
        (".ุงูุชุญุฐูุฑุงุช", "ุนุฑุถ ุนุฏุฏ ุชุญุฐูุฑุงุชู ุงูุญุงููุฉ."),
        (".ุชุนููู ูููุดุฉ ุงูุชุญุฐูุฑ", "ุชุบููุฑ ุฑุณุงูุฉ ุงูุชุญุฐูุฑ (ุจุงูุฑุฏ ุนูู ุงููุต)."),
        (".ุนุฑุถ ูููุดุฉ", "ุนุฑุถ ุฑุณุงูุฉ ุงูุชุญุฐูุฑ ุงูุญุงููุฉ."),
        (".ุนุฏุฏ ุงูุชุญุฐูุฑุงุช <n>", "ุชุนุฏูู ุงูุญุฏ ุงูุฃูุตู ุงููุณููุญ ูู ุงูุชุญุฐูุฑุงุช."),
        (".ุงููุญุธูุฑูู", "ุนุฑุถ ูุงุฆูุฉ ุงููุญุธูุฑูู (ุญุณุจ ุงูุชุญุฐูุฑุงุช)."),
        (".ูุณุญ ุงููุญุธูุฑูู", "ูุณุญ ุฌููุน ุงููุญุธูุฑูู ูู ุงููุงุฆูุฉ."),
    ],
    "ุงูุงุฎุชุตุงุฑุงุช ูุงููููุฒ": [
        (".ุงุฎุชุตุงุฑ + <ูููุฉ>", "ุญูุธ ุงุฎุชุตุงุฑ ูุตู (ุจุงูุฑุฏ ุนูู ุฑุณุงูุฉ)."),
        (".ุญุฐู ุงุฎุชุตุงุฑ + <ูููุฉ>", "ุญุฐู ุงุฎุชุตุงุฑ ูุญููุธ."),
        (".ุงูุงุฎุชุตุงุฑุงุช", "ุนุฑุถ ุฌููุน ุงูุงุฎุชุตุงุฑุงุช ุงููุญููุธุฉ."),
        (".ูููุฒ <key> <url>", "ุฅุถุงูุฉ ุจุตูุฉ ูููุฒ ูุฑุงุจุท."),
        (".ูููุฒ ุญูุธ <key>", "ุญูุธ ุจุตูุฉ ูููุฒ ูู ูุณุงุฆุท ุจุงูุฑุฏ."),
        (".ูููุฒ ุฌูุจ <key>", "ุฅุฑุณุงู ุงููููุฒ ูููู ุฅู ูุงู ูุณูุทูุง ุฃู ุนุฑุถ ุงูุฑุงุจุท."),
        (".ูููุฒ ุนุฑุถ <key>", "ุนุฑุถ ุงููููุฒ ุงููุฑุชุจุท ุจุงูุจุตูุฉ."),
        (".ูุงุฆูุฉ ุงููููุฒ", "ุนุฑุถ ูุงุฆูุฉ ุจุตูุงุช ุงููููุฒ."),
        (".ุงุฒุงูุฉ <key>", "ุญุฐู ุจุตูุฉ ูููุฒ."),
        (".ุงุฒุงูุฉ_ุงูุจุตูุงุช", "ุญุฐู ุฌููุน ุจุตูุงุช ุงููููุฒ."),
    ],
    "ุงููุดุฑ ุงูุขูู": [
        (".ุชูุฑุงุฑ <ุซูุงูู> <ุนุฏุฏ> [ูุต]", "ูุดุฑ ูุชูุฑุฑุ ูููู ุจุงูุฑุฏ ุนูู ุตูุฑุฉ/ุฃูุจูู."),
        (".ุชู <ุซูุงูู> <ุนุฏุฏ> [ูุต]", "ุงุฎุชุตุงุฑ ูุฃูุฑ ุงูุชูุฑุงุฑ."),
        (".ูุดุฑ <ุซูุงูู> <ุนุฏุฏ> [ูุต]", "ุงุฎุชุตุงุฑ ุขุฎุฑ ูุฃูุฑ ุงูุชูุฑุงุฑ."),
        (".ุงููุงู ุงููุดุฑ ุงูุชููุงุฆู", "ุฅููุงู ุฌููุน ุนูููุงุช ุงููุดุฑ ุงููุชูุฑุฑุฉ."),
    ],
    "ุฃุฏูุงุช ุงููููุงุช ูุงููุฌููุนุงุช": [
        (".ูุงุฆูู ุฌููุน ุงููููุงุช", "ุนุฑุถ ูุงุฆูุฉ ุงููููุงุช ุงูุนุงูุฉ/ุงูุฎุงุตุฉ."),
        (".ูุงุฆูู ุงููููุงุช ุงููุดุฑู ุนูููุง", "ุนุฑุถ ุงููููุงุช ุงูุชู ุฃูุช ูุดุฑู ูููุง."),
        (".ูุงุฆูู ูููุงุชู", "ุนุฑุถ ุงููููุงุช ุงูุชู ุฃูุช ูุงูููุง."),
        (".ูุงุฆูู ุฌููุน ุงููุฌููุนุงุช", "ุนุฑุถ ุฌููุน ุงููุฌููุนุงุช (ุงูุนุงุฏูุฉ/ุงูุฎุงุฑูุฉ)."),
        (".ูุงุฆูู ูุฌููุนุงุช ุงุฏูุฑูุง", "ุนุฑุถ ุงููุฌููุนุงุช ุงูุชู ุฃูุช ูุดุฑู ูููุง."),
        (".ูุงุฆูู ูุฑูุจุงุชู", "ุนุฑุถ ุงููุฌููุนุงุช ุงูุชู ุฃูุช ูุงูููุง."),
        (".ูุดู ุงููุฌููุนุฉ [reply/ID]", "ูุดู ูุนูููุงุช ูุชูุฏูุฉ ุนู ูุฌููุนุฉ/ููุงุฉ."),
    ],
    "ุงูุฅุฏุงุฑุฉ": [
        (".ุญุธุฑ [reply/ID/@]", "ุญุธุฑ ูุณุชุฎุฏู ูู ุงููุฌููุนุฉ."),
        (".ุทุฑุฏ [reply/ID/@]", "ุทุฑุฏ ูุณุชุฎุฏู ูู ุงููุฌููุนุฉ."),
        (".ุชูููุฏ [reply/ID/@]", "ุชูููุฏ ุฅุฑุณุงู ุงูุฑุณุงุฆู ููุณุชุฎุฏู."),
        (".ุงูุบุงุก ุงูุญุธุฑ [reply/ID/@]", "ุฅูุบุงุก ุงูุญุธุฑ."),
        (".ุงูุบุงุก ุงูุชูููุฏ [reply/ID/@]", "ุฅูุบุงุก ุงูุชูููุฏ."),
    ],
}

COMMANDS_EN = {
    "Statistics": [
        (".stats", "Show account stats: users, groups, channels, bots."),
        (".meinfo", "Advanced details: dialogs, bots, groups and channels."),
    ],
    "Storage": [
        (".enable_storage", "Create/enable a storage group for forwarding private messages."),
        (".disable_storage", "Disable storage and remove local group binding."),
    ],
    "Auto Replies": [
        (".add_reply + KEY + VALUE", "Add an auto reply for a specific keyword."),
        (".replies", "List all saved replies."),
        (".enable_here", "Enable auto replies in this group."),
        (".disable_here", "Disable auto replies in this group."),
    ],
    "AFK & Custom Replies": [
        (".afk_on", "Enable AFK auto replies."),
        (".custom_on", "Enable custom replies based on triggers."),
        (".afk_off", "Disable AFK and custom replies."),
        (".reply_template", "Set a reply template (reply to a message)."),
        (".reply <text>", "Add a custom reply to the replied message."),
        (".del_reply", "Delete a custom reply (reply to the original message)."),
        (".allow", "Allow this private chat from AFK restrictions."),
        (".disallow", "Remove allow for this private chat."),
    ],
    "Games": [
        (".dart [1-6] | ๐ฏ", "Dart game. Optionally pick a number."),
        (".dice [1-6] | ๐ฒ", "Dice game. Optionally pick a number."),
        (".basket [1-5] | ๐", "Basketball mini game."),
        (".ball [1-5] | โฝ๏ธ", "Football mini game."),
        (".slot [1-64] | ๐ฐ", "Slot machine."),
        (".gym", "Simple animated gym."),
        (".truthdare", "Open Truth/Dare menu."),
        (".dare", "Generate a light dare."),
        (".truth", "Generate a respectful truth question."),
    ],
    "Media & Tools": [
        (".youtube <query>", "Fetch first matching video from YouTube."),
        (".sticker", "Create a sticker from an image/sticker (reply to media)."),
        (".sticker_info", "Get sticker pack info."),
        (".tiktok <url>", "Download TikTok video without watermark."),
    ],
    "AI": [
        (".ai <text/reply>", "Smart brief answerโexample: .ai how are you โ 'Iโm fine!'"),
        (".translate <lang> [text/reply]", "Smart translation via Google."),
        (".detect_lang [text/reply]", "Detect text language automatically."),
        (".summarize [sentences] (reply)", "Quick summary to N sentences."),
    ],
    "Hunting (Usernames)": [
        (".hunt <pattern>", "Start username hunting according to pattern."),
        (".hunt_status", "Show hunting status and attempts."),
        (".hunt_stop", "Stop current hunting process."),
    ],
    "Monitoring": [
        (".watch <@user>", "Watch user changes: name/photo/bio."),
        (".unwatch <@user>", "Stop watching user."),
    ],
    "Profile": [
        (".time_name_on", "Enable time in first name."),
        (".time_name_off", "Disable time and clean name."),
        (".name (text)", "Set first name with current time."),
        (".impersonate", "Impersonate replied user (name/bio/photo)."),
        (".restore", "Restore original name/bio/photo."),
    ],
    "Private Protection & Warnings": [
        (".private_protect", "Toggle private protection against bad words."),
        (".accept", "Accept replied user (no warnings)."),
        (".unaccept", "Remove acceptance for replied user."),
        (".clear_warnings", "Clear replied user warnings."),
        (".my_warnings", "Show your warnings count."),
        (".set_warning_template", "Change warning message (reply to text)."),
        (".show_template", "Show current warning template."),
        (".set_max_warnings <n>", "Set max warnings limit."),
        (".banned_list", "Show banned users list."),
        (".clear_banned", "Clear all banned users."),
    ],
    "Shortcuts & Memes": [
        (".shortcut + <key>", "Save a shortcut (reply to message)."),
        (".del_shortcut + <key>", "Delete a saved shortcut."),
        (".shortcuts", "List all saved shortcuts."),
        (".memes <key> <url>", "Add meme fingerprint as a link."),
        (".memes_save <key>", "Save meme from replied media."),
        (".memes_get <key>", "Send meme file if media or show link."),
        (".memes_show <key>", "Show meme linked to key."),
        (".memes_list", "Show meme keys list."),
        ("remove <key>", "Delete meme fingerprint."),
        (".memes_clear", "Delete all memes."),
    ],
    "Auto Publishing": [
        (".repeat <sec> <count> [text]", "Repeated publishing; can reply to photo/album."),
        (".rep <sec> <count> [text]", "Shortcut for repeat."),
        (".publish <sec> <count> [text]", "Another shortcut for repeat."),
        (".stop_auto_publish", "Stop all active publishing tasks."),
    ],
    "Channels & Groups Tools": [
        (".list_all_channels", "List public/private channels."),
        (".list_admin_channels", "List channels you admin."),
        (".list_my_channels", "List channels you own."),
        (".list_all_groups", "List all groups (normal/mega)."),
        (".list_admin_groups", "List groups you admin."),
        (".list_my_groups", "List groups you own."),
        (".inspect_group [reply/ID]", "Advanced info about group/channel."),
    ],
    "Administration": [
        (".ban [reply/ID/@]", "Ban a user from the group."),
        (".kick [reply/ID/@]", "Kick a user from the group."),
        (".restrict [reply/ID/@]", "Restrict user from sending messages."),
        (".unban [reply/ID/@]", "Unban user."),
        (".unrestrict [reply/ID/@]", "Unrestrict user."),
        (".admin_log", "Show last 25 admin actions with reasons."),
    ],
}

def build_section(title, items):
    lines = [f"โข {cmd}\n  โคท {desc}" for cmd, desc in items]
    return f"ใ {title} ใ\n" + "\n".join(lines)

def build_help_text(commands, header, footer):
    parts = [header]
    for title, items in commands.items():
        parts.append(build_section(title, items))
        parts.append(SEPARATOR)
    parts.append(footer)
    return "\n".join(parts)

def build_menu_text(lang):
    return (HEADER_AR if lang == "AR" else HEADER_EN) + \
        ("ุงุฎุชุฑ ูุณููุง ูู ุงูุฃุฒุฑุงุฑ ุฃุฏูุงู ูุนุฑุถ ุฃูุงูุฑู ูุน ุงูุดุฑุญ.\n" if lang == "AR" else "Choose a section from the buttons below to view its commands and descriptions.\n") + \
        (FOOTER_AR if lang == "AR" else FOOTER_EN)

def build_menu_buttons(lang, sections):
    rows = []
    row = []
    prefix = f"inline_help:{lang}:idx:"
    for idx, title in enumerate(sections):
        row.append(Button.inline(title, data=(prefix + str(idx)).encode()))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([Button.inline("ุนุฑุถ ุงููู" if lang == "AR" else "Show All", data=f"inline_help:{lang}:ALL".encode())])
    return rows

def build_section_buttons_by_index(index, lang, sections):
    buttons = []
    nav = []
    if index > 0:
        nav.append(Button.inline("โต ุงูุณุงุจู" if lang == "AR" else "โต Prev", data=f"inline_help:{lang}:idx:{index-1}".encode()))
    else:
        nav.append(Button.inline("โต ุงููุงุฆูุฉ" if lang == "AR" else "โต Menu", data=f"inline_help:{lang}:MENU".encode()))
    if index < len(sections) - 1:
        nav.append(Button.inline("ุงูุชุงูู โถ" if lang == "AR" else "Next โถ", data=f"inline_help:{lang}:idx:{index+1}".encode()))
    else:
        nav.append(Button.inline("โต ุงููุงุฆูุฉ" if lang == "AR" else "โต Menu", data=f"inline_help:{lang}:MENU".encode()))
    buttons.append(nav)
    buttons.append([
        Button.inline("ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ" if lang == "AR" else "Main Menu", data=f"inline_help:{lang}:MENU".encode()),
        Button.inline("ุนุฑุถ ุงููู" if lang == "AR" else "Show All", data=f"inline_help:{lang}:ALL".encode())
    ])
    return buttons

# Only register if bot client exists
if bot is not None:
    @bot.on(events.InlineQuery)
    async def inline_query_handler(event):
        q = (event.query or "").strip().lower()
        # detect language from query keywords
        if q in ("", "ุงูุงูุงูุฑ", "ุงูุงูุฑ", "ูุณุงุนุฏุฉ", "help", "assist"):
            lang = "EN" if q in ("help", "assist") else "AR"
        elif q in ("english", "en"):
            lang = "EN"
        else:
            # default to AR for non-recognized queries to avoid confusion
            lang = "AR"

        commands = COMMANDS_AR if lang == "AR" else COMMANDS_EN
        sections = list(commands.keys())
        text = build_menu_text(lang)
        buttons = build_menu_buttons(lang, sections)
        await event.answer([
            event.builder.article(
                title=("ูุงุฆูุฉ ุงููุณุงุนุฏุฉ โข FLEX" if lang == "AR" else "Help Menu โข FLEX"),
                text=text,
                buttons=buttons,
                description=("ุงูุชุญ ูุงุฆูุฉ ุงูุฃูุณุงู ุจุฃุฒุฑุงุฑ ุชููู" if lang == "AR" else "Open sections menu with navigation buttons"),
            )
        ], cache_time=0)

    @bot.on(events.CallbackQuery)
    async def inline_help_callback(event):
        data = event.data or b""
        if not data.startswith(b"inline_help:"):
            return
        parts = data.decode().split(":")
        if len(parts) < 3:
            return
        lang = parts[1]
        commands = COMMANDS_AR if lang == "AR" else COMMANDS_EN
        sections = list(commands.keys())

        action = parts[2]
        if action in {"MENU", "ALL"}:
            if action == "MENU":
                await event.edit(build_menu_text(lang), buttons=build_menu_buttons(lang, sections))
            elif action == "ALL":
                await event.edit("ุฌุงุฑู ุนุฑุถ ุฌููุน ุงูุฃูุณุงู..." if lang == "AR" else "Showing all sections...")
                text = build_help_text(commands, HEADER_AR if lang == "AR" else HEADER_EN, FOOTER_AR if lang == "AR" else FOOTER_EN)
                await bot.send_message(event.chat_id, text)
                await event.answer("ุชู ุงูุฅุฑุณุงู." if lang == "AR" else "Sent.")
            return
        if action.startswith("idx"):
            try:
                index = int(parts[3])
            except ValueError:
                await event.answer("ููุฑุณ ุบูุฑ ุตุงูุญ." if lang == "AR" else "Invalid index.", alert=True)
                return
            if not (0 <= index < len(sections)):
                await event.answer("ุฎุงุฑุฌ ุงููุทุงู." if lang == "AR" else "Out of range.", alert=True)
                return
            title = sections[index]
            text = (HEADER_AR if lang == "AR" else HEADER_EN) + build_section(title, commands.get(title, [])) + (FOOTER_AR if lang == "AR" else FOOTER_EN)
            await event.edit(text, buttons=build_section_buttons_by_index(index, lang, sections))
            await event.answer(("ุชู ูุชุญ ูุณู: " + title) if lang == "AR" else ("Opened section: " + title))lethon import events, Button
from core.bot_client import bot

# Inline-mode helper with Arabic and English menus

HEADER_AR = (
    "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ\n"
    "โ   ๐ฉ ูุงุฆูุฉ ุฃูุงูุฑ FLEX โ ููููุฒุฉ ูุณููุฉ ุงูุงุณุชุฎุฏุงู ๐ช   โ\n"
    "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ\n"
)
FOOTER_AR = "\nโ ูุณุชูุฏ ุงูุฃูุงูุฑ โข FLEX (Inline) โ\n"

HEADER_EN = (
    "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ\n"
    "โ   ๐ฉ FLEX Commands โ Elegant & Easy to Use ๐ช   โ\n"
    "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ\n"
)
FOOTER_EN = "\nโ Command Reference โข FLEX (Inline) โ\n"

SEPARATOR = "\nโโโโโโโโโโโ\n"

# Arabic sections
COMMANDS_AR = {
    "ุงูุฅุญุตุงุฆูุงุช": [
        (".ุงุญุตุงุฆูุงุชู", "ูุนุฑุถ ุฅุญุตุงุฆูุงุช ุงูุญุณุงุจ: ุงููุณุชุฎุฏูููุ ุงููุฌููุนุงุชุ ุงููููุงุชุ ุงูุจูุชุงุช."),
        (".ูุนูููุงุชู", "ุชูุงุตูู ูุชูุฏูุฉ ุนู ุงูุญุณุงุจ: ุนุฏุฏ ุงููุญุงุฏุซุงุชุ ุงูุจูุชุงุชุ ุงููุฌููุนุงุช ูุงููููุงุช."),
    ],
    "ุงูุชุฎุฒูู": [
        (".ุชูุนูู ุงูุชุฎุฒูู", "ุฅูุดุงุก ูุชูุนูู ูุฑูุจ ุชุฎุฒูู ุฎุงุต ุจุงูุฑุณุงุฆู ุงููุงุฑุฏุฉ ูู ุงูุฎุงุต."),
        (".ุชุนุทูู ุงูุชุฎุฒูู", "ุฅููุงู ุงูุชุฎุฒูู ูุญุฐู ุชุนุฑูู ูุฌููุนุฉ ุงูุชุฎุฒูู ุงููุญููุฉ."),
    ],
    "ุงูุฑุฏูุฏ ุงูุชููุงุฆูุฉ": [
        (".ุงุถู ุฑุฏ + ุงููููุฉ + ุงูุฑุฏ", "ุฅุถุงูุฉ ุฑุฏ ุชููุงุฆู ูููููุฉ ุงููุญุฏุฏุฉ."),
        (".ุงูุฑุฏูุฏ", "ุนุฑุถ ุฌููุน ุงูุฑุฏูุฏ ุงููุฎุฒูุฉ."),
        (".ุชูุนูู ููุง", "ุชูุนูู ุงูุฑุฏูุฏ ุงูุชููุงุฆูุฉ ูู ุงููุฌููุนุฉ ุงูุญุงููุฉ."),
        (".ุชุนุทูู ููุง", "ุชุนุทูู ุงูุฑุฏูุฏ ุงูุชููุงุฆูุฉ ูู ุงููุฌููุนุฉ ุงูุญุงููุฉ."),
    ],
    "ูุถุน ุงูุบูุงุจ ูุงูุฑุฏูุฏ ุงููุฎุตุตุฉ": [
        (".ุชุดุบูู ุงูุฑุฏ", "ุชุดุบูู ุงูุฑุฏ ุงูุชููุงุฆู ููุฎุงุต."),
        (".ุงููุฎุตุต ุชุดุบูู", "ุชุดุบูู ุงูุฑุฏูุฏ ุงููุฎุตุตุฉ ุงููุจููุฉ ุนูู ูุตูุต ูุญุฏุฏุฉ."),
        (".ุชุนุทูู ุงูุฑุฏ", "ุชุนุทูู ุงูุฑุฏ ุงูุชููุงุฆู ูุงูุฑุฏูุฏ ุงููุฎุตุตุฉ."),
        (".ูููุดุฉ ุงูุฑุฏ", "ุชุนููู ุฑุณุงูุฉ ูุญุฏุฏุฉ ูุชููู ูููุดุฉ ุงูุฑุฏ (ุจุงูุฑุฏ ุนูู ุฑุณุงูุฉ)."),
        (".ุฑุฏ <ุงููุต>", "ุฅุถุงูุฉ ุฑุฏ ูุฎุตุต ููุต ูุชู ุงูุฑุฏ ุนููู."),
        (".ุญุฐู ุฑุฏ", "ุญุฐู ุฑุฏ ูุฎุตุต (ุจุงูุฑุฏ ุนูู ูุต ูุถุงู ุณุงุจููุง)."),
        (".ุณูุงุญ", "ุณูุงุญ ูุญุงุฏุซุฉ ุฎุงุตุฉ ูุนููุฉ ูู ูููุฏ ุงูุฑุฏ."),
        (".ุงูุบุงุก ุงูุณูุงุญ", "ุฅูุบุงุก ุงูุณูุงุญ ููุญุงุฏุซุฉ ุฎุงุตุฉ."),
    ],
    "ุงูุฃูุนุงุจ": [
        (".ุณูู [1-6] | ๐ฏ", "ูุนุจุฉ ุงูุณูู. ูููู ุชุญุฏูุฏ ุฑูู ูุทููุจ."),
        (".ูุฑุฏ [1-6] | ๐ฒ", "ูุนุจุฉ ุงููุฑุฏ. ูููู ุชุญุฏูุฏ ุฑูู ูุทููุจ."),
        (".ุณูู [1-5] | ๐", "ูุนุจุฉ ูุฑุฉ ุงูุณูุฉ."),
        (".ูุฑุฉ [1-5] | โฝ๏ธ", "ูุนุจุฉ ูุฑุฉ ุงููุฏู."),
        (".ุญุธ [1-64] | ๐ฐ", "ุขูุฉ ุงูุญุธ."),
        (".gym", "ุนุฑุถ ูุชุญุฑู ุฑูุงุถู ุจุณูุท."),
        (".ุงุญูุงู", "ูุชุญ ูุงุฆูุฉ ูุนุจุฉ ุงูุฃุญูุงู (ุญูู/ุญูููุฉ)."),
        (".ุญูู", "ููููุฏ ุชุญุฏูู/ููููุฉ ุฎูููุฉ ูุนูููุฉ."),
        (".ุญูููุฉ", "ููููุฏ ุณุคุงู ุญูููุฉ ูุญุชุฑู."),
    ],
    "ุงููุณุงุฆุท ูุงูุฃุฏูุงุช": [
        (".ููุชููุจ <ุจุญุซ>", "ุฌูุจ ุฃูู ููุฏูู ูุทุงุจู ูู ููุชููุจ."),
        (".ููุตู", "ุตูุน ููุตู ูู ุตูุฑุฉ/ููุตู ุจุงูุฑุฏ ุนูู ุงููุณุงุฆุท."),
        (".ูุนูููุงุช ุงูููุตู", "ุฌูุจ ูุนูููุงุช ุญุฒูุฉ ุงูููุตูุงุช."),
        (".ุชู <ุฑุงุจุท>", "ุชุญููู ููุฏูู ุชูู ุชูู ุจุฏูู ุนูุงูุฉ ูุงุฆูุฉ."),
    ],
    "ุงูุฐูุงุก ุงูุงุตุทูุงุนู": [
        (".ุฐูุงุก <ูุต/ุจุงูุฑุฏ>", "ุฑุฏ ุฐูู ูุฎุชุตุฑโูุซุงู: .ุฐูุงุก ููู ุญุงูู โ 'ุจุฎูุฑ ุงูุญูุฏ ููู!'."),
        (".ุชุฑุฌู <ูุบุฉ> [ูุต/ุจุงูุฑุฏ]", "ุชุฑุฌูุฉ ุฐููุฉ ุนุจุฑ Google (gpytranslate/deep-translator)."),
        (".ูุดู_ูุบุฉ [ูุต/ุจุงูุฑุฏ]", "ูุดู ูุบุฉ ุงููุต ุชููุงุฆููุง."),
        (".ุชูุฎูุต [ุนุฏุฏ_ุงูุฌูู] (ุจุงูุฑุฏ)", "ุชูุฎูุต ุณุฑูุน ูููุต ุฅูู ุนุฏุฏ ุฌูู ูุญุฏุฏ."),
    ],
    "ุฃุฏูุงุช ุงููููุงุช ูุงููุฌููุนุงุช": [
        (".ูุงุฆูู ุฌููุน ุงููููุงุช", "ุนุฑุถ ูุงุฆูุฉ ุงููููุงุช ุงูุนุงูุฉ/ุงูุฎุงุตุฉ."),
        (".ูุงุฆูู ุงููููุงุช ุงููุดุฑู ุนูููุง", "ุนุฑุถ ุงููููุงุช ุงูุชู ุฃูุช ูุดุฑู ูููุง."),
        (".ูุงุฆูู ูููุงุชู", "ุนุฑุถ ุงููููุงุช ุงูุชู ุฃูุช ูุงูููุง."),
        (".ูุงุฆูู ุฌููุน ุงููุฌููุนุงุช", "ุนุฑุถ ุฌููุน ุงููุฌููุนุงุช (ุงูุนุงุฏูุฉ/ุงูุฎุงุฑูุฉ)."),
        (".ูุงุฆูู ูุฌููุนุงุช ุงุฏูุฑูุง", "ุนุฑุถ ุงููุฌููุนุงุช ุงูุชู ุฃูุช ูุดุฑู ูููุง."),
        (".ูุงุฆูู ูุฑูุจุงุชู", "ุนุฑุถ ุงููุฌููุนุงุช ุงูุชู ุฃูุช ูุงูููุง."),
        (".ูุดู ุงููุฌููุนุฉ [reply/ID]", "ูุดู ูุนูููุงุช ูุชูุฏูุฉ ุนู ูุฌููุนุฉ/ููุงุฉ."),
    ],
    "ุงูุฅุฏุงุฑุฉ": [
        (".ุญุธุฑ [reply/ID/@]", "ุญุธุฑ ูุณุชุฎุฏู ูู ุงููุฌููุนุฉ."),
        (".ุทุฑุฏ [reply/ID/@]", "ุทุฑุฏ ูุณุชุฎุฏู ูู ุงููุฌููุนุฉ."),
        (".ุชูููุฏ [reply/ID/@]", "ุชูููุฏ ุฅุฑุณุงู ุงูุฑุณุงุฆู ููุณุชุฎุฏู."),
        (".ุงูุบุงุก ุงูุญุธุฑ [reply/ID/@]", "ุฅูุบุงุก ุงูุญุธุฑ."),
        (".ุงูุบุงุก ุงูุชูููุฏ [reply/ID/@]", "ุฅูุบุงุก ุงูุชูููุฏ."),
    ],
}
SECTIONS_AR = list(COMMANDS_AR.keys())

# English sections
COMMANDS_EN = {
    "Statistics": [
        (".stats", "Show account statistics: users, groups, channels, bots."),
        (".myinfo", "Detailed info: private chats, groups, channels, admins, unread."),
    ],
    "Storage": [
        (".enable_storage", "Create and enable a storage mega-group for private forwards."),
        (".disable_storage", "Disable storage and remove local group binding."),
    ],
    "Auto Replies": [
        (".add_reply + key + text", "Add an auto-reply for a specific key."),
        (".replies", "List all stored replies."),
        (".enable_here", "Enable auto replies in current group."),
        (".disable_here", "Disable auto replies in current group."),
    ],
    "AFK & Custom Replies": [
        (".afk_on", "Turn on automatic private replies."),
        (".custom_on", "Enable custom replies by triggers."),
        (".afk_off", "Disable both AFK and custom replies."),
        (".reply_template", "Set a template message (by replying)."),
        (".reply <text>", "Add a custom reply for a trigger (reply to trigger)."),
        (".del_reply", "Delete a custom reply (reply to the trigger message)."),
        (".allow", "Allow a private chat from AFK restrictions."),
        (".disallow", "Remove allowance for a private chat."),
    ],
    "Games": [
        (".dart [1-6] | ๐ฏ", "Dart game."),
        (".dice [1-6] | ๐ฒ", "Dice game."),
        (".basket [1-5] | ๐", "Basketball."),
        (".ball [1-5] | โฝ๏ธ", "Football."),
        (".slot [1-64] | ๐ฐ", "Slot machine."),
        (".gym", "Gym animation."),
        (".truth_dare", "Open Truth/Dare menu."),
        (".dare", "Get a random dare."),
        (".truth", "Get a random truth."),
    ],
    "Media & Tools": [
        (".youtube <query>", "Find the first matching YouTube video."),
        (".sticker", "Create a sticker from an image/sticker (reply)."),
        (".sticker_info", "Get sticker pack info."),
        (".tiktok <link>", "Download TikTok video without watermark."),
    ],
    "AI": [
        (".ai <text/reply>", "Smart short reply. Example: .ai how are you โ 'Fine, thanks!'."),
        (".translate <lang> [text/reply]", "Smart translation via Google."),
        (".detect_lang [text/reply]", "Detect language."),
        (".summarize [n] (reply)", "Quick summarization to n sentences."),
    ],
    "Channels & Groups Tools": [
        (".list channels_all", "List all channels."),
        (".list channels_admin", "Channels you admin."),
        (".list channels_owner", "Your channels (owner)."),
        (".list groups_all", "All groups."),
        (".list groups_admin", "Groups you admin."),
        (".list groups_owner", "Groups you own."),
        (".inspect_group [reply/ID]", "Inspect group/channel info."),
    ],
    "Administration": [
        (".ban [reply/ID/@]", "Ban a user from group."),
        (".kick [reply/ID/@]", "Kick a user from group."),
        (".restrict [reply/ID/@]", "Restrict a user from sending messages."),
        (".unban [reply/ID/@]", "Unban user."),
        (".unrestrict [reply/ID/@]", "Remove restrictions."),
    ],
}
SECTIONS_EN = list(COMMANDS_EN.keys())

def build_menu_text_ar():
    return HEADER_AR + "ุงุฎุชุฑ ูุณููุง ูู ุงูุฃุฒุฑุงุฑ ุฃุฏูุงู ูุนุฑุถ ุฃูุงูุฑู ูุน ุงูุดุฑุญ.\n" + FOOTER_AR

def build_menu_text_en():
    return HEADER_EN + "Pick a section from the buttons below to view its commands and descriptions.\n" + FOOTER_EN

def build_buttons(prefix, sections, english=False):
    rows = []
    row = []
    for idx, title in enumerate(sections):
        row.append(Button.inline(title, data=f"{prefix}:idx:{idx}".encode()))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([Button.inline("Show All" if english else "ุนุฑุถ ุงููู", data=f"{prefix}:ALL".encode())])
    return rows

def build_section_text_ar(title):
    items = COMMANDS_AR.get(title, [])
    lines = "\n".join([f"โข {cmd}\n  โคท {desc}" for cmd, desc in items])
    return HEADER_AR + f"ใ {title} ใ\n" + lines + FOOTER_AR

def build_section_text_en(title):
    items = COMMANDS_EN.get(title, [])
    lines = "\n".join([f"โข {cmd}\n  โคท {desc}" for cmd, desc in items])
    return HEADER_EN + f"ใ {title} ใ\n" + lines + FOOTER_EN

# Only register if bot client exists
if bot is not None:
    @bot.on(events.InlineQuery)
    async def inline_query_handler(event):
        q = (event.query or "").strip().lower()
        if q in ("", "ูุณุงุนุฏุฉ", "ุงูุงูุงูุฑ", "ุงูุงูุฑ"):
            await event.answer([
                event.builder.article(
                    title="ูุงุฆูุฉ ุงููุณุงุนุฏุฉ โข FLEX",
                    text=build_menu_text_ar(),
                    buttons=build_buttons("inline_help_ar", SECTIONS_AR, english=False),
                    description="ุฃูุชุญ ูุงุฆูุฉ ุงูุฃูุณุงู ุจุฃุฒุฑุงุฑ ุชููู",
                )
            ], cache_time=0)
        elif q in ("help", "commands", "assist"):
            await event.answer([
                event.builder.article(
                    title="Help Menu โข FLEX",
                    text=build_menu_text_en(),
                    buttons=build_buttons("inline_help_en", SECTIONS_EN, english=True),
                    description="Open sectioned command menu with navigation buttons",
                )
            ], cache_time=0)

    @bot.on(events.CallbackQuery)
    async def inline_help_callback(event):
        data = (event.data or b"").decode()
        if data.startswith("inline_help_ar:"):
            parts = data.split(":")
            if len(parts) == 2 and parts[1] in {"MENU", "ALL"}:
                if parts[1] == "MENU":
                    await event.edit(build_menu_text_ar(), buttons=build_buttons("inline_help_ar", SECTIONS_AR, english=False))
                else:
                    await event.edit("ุฌุงุฑู ุนุฑุถ ุฌููุน ุงูุฃูุณุงู...")
                    text = HEADER_AR + "\n".join(
                        ["\n".join([f"ใ {title} ใ", "\n".join([f"โข {c}\n  โคท {d}" for c, d in COMMANDS_AR[title]]), SEPARATOR]) for title in SECTIONS_AR]
                    ) + FOOTER_AR
                    await bot.send_message(event.chat_id, text)
                    await event.answer("ุชู ุงูุฅุฑุณุงู.")
                return
            if len(parts) == 3 and parts[1] == "idx":
                idx = int(parts[2])
                if not (0 <= idx < len(SECTIONS_AR)):
                    await event.answer("ุฎุงุฑุฌ ุงููุทุงู.", alert=True)
                    return
                title = SECTIONS_AR[idx]
                await event.edit(build_section_text_ar(title), buttons=build_buttons("inline_help_ar", SECTIONS_AR, english=False))
                await event.answer(f"ุชู ูุชุญ ูุณู: {title}")
        elif data.startswith("inline_help_en:"):
            parts = data.split(":")
            if len(parts) == 2 and parts[1] in {"MENU", "ALL"}:
                if parts[1] == "MENU":
                    await event.edit(build_menu_text_en(), buttons=build_buttons("inline_help_en", SECTIONS_EN, english=True))
                else:
                    await event.edit("Showing all sections...")
                    text = HEADER_EN + "\n".join(
                        ["\n".join([f"ใ {title} ใ", "\n".join([f"โข {c}\n  โคท {d}" for c, d in COMMANDS_EN[title]]), SEPARATOR]) for title in SECTIONS_EN]
                    ) + FOOTER_EN
                    await bot.send_message(event.chat_id, text)
                    await event.answer("Sent.")
                return
            if len(parts) == 3 and parts[1] == "idx":
                idx = int(parts[2])
                if not (0 <= idx < len(SECTIONS_EN)):
                    await event.answer("Out of range.", alert=True)
                    return
                title = SECTIONS_EN[idx]
                await event.edit(build_section_text_en(title), buttons=build_buttons("inline_help_en", SECTIONS_EN, english=True))
                await event.answer(f"Opened: {title}")lethon import events, Button
from core.bot_client import bot

# Inline-mode helper with Arabic and English menus

HEADER_AR = (
    "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ\n"
    "โ   ๐ฉ ูุงุฆูุฉ ุฃูุงูุฑ FLEX โ ููููุฒุฉ ูุณููุฉ ุงูุงุณุชุฎุฏุงู ๐ช   โ\n"
    "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ\n"
)
FOOTER_AR = "\nโ ูุณุชูุฏ ุงูุฃูุงูุฑ โข FLEX (Inline) โ\n"

HEADER_EN = (
    "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ\n"
    "โ   ๐ฉ FLEX Commands โ Elegant & Easy to Use ๐ช   โ\n"
    "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ\n"
)
FOOTER_EN = "\nโ Command Reference โข FLEX (Inline) โ\n"

SEPARATOR = "\nโโโโโโโโโโโ\n"

# Import sections from help.py by duplicating maps (to avoid circular imports)
COMMANDS_AR = {
    "ุงูุฅุญุตุงุฆูุงุช": [
        (".ุงุญุตุงุฆูุงุชู", "ูุนุฑุถ ุฅุญุตุงุฆูุงุช ุงูุญุณุงุจ: ุงููุณุชุฎุฏูููุ ุงููุฌููุนุงุชุ ุงููููุงุชุ ุงูุจูุชุงุช."),
        (".ูุนูููุงุชู", "ุชูุงุตูู ูุชูุฏูุฉ ุนู ุงูุญุณุงุจ: ุนุฏุฏ ุงููุญุงุฏุซุงุชุ ุงูุจูุชุงุชุ ุงููุฌููุนุงุช ูุงููููุงุช."),
    ],
    "ุงูุชุฎุฒูู": [
        (".ุชูุนูู ุงูุชุฎุฒูู", "ุฅูุดุงุก ูุชูุนูู ูุฑูุจ ุชุฎุฒูู ุฎุงุต ุจุงูุฑุณุงุฆู ุงููุงุฑุฏุฉ ูู ุงูุฎุงุต."),
        (".ุชุนุทูู ุงูุชุฎุฒูู", "ุฅููุงู ุงูุชุฎุฒูู ูุญุฐู ุชุนุฑูู ูุฌููุนุฉ ุงูุชุฎุฒูู ุงููุญููุฉ."),
    ],
    "ุงูุฑุฏูุฏ ุงูุชููุงุฆูุฉ": [
        (".ุงุถู ุฑุฏ + ุงููููุฉ + ุงูุฑุฏ", "ุฅุถุงูุฉ ุฑุฏ ุชููุงุฆู ูููููุฉ ุงููุญุฏุฏุฉ."),
        (".ุงูุฑุฏูุฏ", "ุนุฑุถ ุฌููุน ุงูุฑุฏูุฏ ุงููุฎุฒูุฉ."),
        (".ุชูุนูู ููุง", "ุชูุนูู ุงูุฑุฏูุฏ ุงูุชููุงุฆูุฉ ูู ุงููุฌููุนุฉ ุงูุญุงููุฉ."),
        (".ุชุนุทูู ููุง", "ุชุนุทูู ุงูุฑุฏูุฏ ุงูุชููุงุฆูุฉ ูู ุงููุฌููุนุฉ ุงูุญุงููุฉ."),
    ],
    "ูุถุน ุงูุบูุงุจ ูุงูุฑุฏูุฏ ุงููุฎุตุตุฉ": [
        (".ุชุดุบูู ุงูุฑุฏ", "ุชุดุบูู ุงูุฑุฏ ุงูุชููุงุฆู ููุฎุงุต."),
        (".ุงููุฎุตุต ุชุดุบูู", "ุชุดุบูู ุงูุฑุฏูุฏ ุงููุฎุตุตุฉ ุงููุจููุฉ ุนูู ูุตูุต ูุญุฏุฏุฉ."),
        (".ุชุนุทูู ุงูุฑุฏ", "ุชุนุทูู ุงูุฑุฏ ุงูุชููุงุฆู ูุงูุฑุฏูุฏ ุงููุฎุตุตุฉ."),
        (".ูููุดุฉ ุงูุฑุฏ", "ุชุนููู ุฑุณุงูุฉ ูุญุฏุฏุฉ ูุชููู ูููุดุฉ ุงูุฑุฏ (ุจุงูุฑุฏ ุนูู ุฑุณุงูุฉ)."),
        (".ุฑุฏ <ุงููุต>", "ุฅุถุงูุฉ ุฑุฏ ูุฎุตุต ููุต ูุชู ุงูุฑุฏ ุนููู."),
        (".ุญุฐู ุฑุฏ", "ุญุฐู ุฑุฏ ูุฎุตุต (ุจุงูุฑุฏ ุนูู ูุต ูุถุงู ุณุงุจููุง)."),
        (".ุณูุงุญ", "ุณูุงุญ ูุญุงุฏุซุฉ ุฎุงุตุฉ ูุนููุฉ ูู ูููุฏ ุงูุฑุฏ."),
        (".ุงูุบุงุก ุงูุณูุงุญ", "ุฅูุบุงุก ุงูุณูุงุญ ููุญุงุฏุซุฉ ุฎุงุตุฉ."),
    ],
    "ุงูุฃูุนุงุจ": [
        (".ุณูู [1-6] | ๐ฏ", "ูุนุจุฉ ุงูุณูู. ูููู ุชุญุฏูุฏ ุฑูู ูุทููุจ."),
        (".ูุฑุฏ [1-6] | ๐ฒ", "ูุนุจุฉ ุงููุฑุฏ. ูููู ุชุญุฏูุฏ ุฑูู ูุทููุจ."),
        (".ุณูู [1-5] | ๐", "ูุนุจุฉ ูุฑุฉ ุงูุณูุฉ."),
        (".ูุฑุฉ [1-5] | โฝ๏ธ", "ูุนุจุฉ ูุฑุฉ ุงููุฏู."),
        (".ุญุธ [1-64] | ๐ฐ", "ุขูุฉ ุงูุญุธ."),
        (".gym", "ุนุฑุถ ูุชุญุฑู ุฑูุงุถู ุจุณูุท."),
        (".ุงุญูุงู", "ูุชุญ ูุงุฆูุฉ ูุนุจุฉ ุงูุฃุญูุงู (ุญูู/ุญูููุฉ)."),
        (".ุญูู", "ููููุฏ ุชุญุฏูู/ููููุฉ ุฎูููุฉ ูุนูููุฉ."),
        (".ุญูููุฉ", "ููููุฏ ุณุคุงู ุญูููุฉ ูุญุชุฑู."),
    ],
    "ุงููุณุงุฆุท ูุงูุฃุฏูุงุช": [
        (".ููุชููุจ <ุจุญุซ>", "ุฌูุจ ุฃูู ููุฏูู ูุทุงุจู ูู ููุชููุจ."),
        (".ููุตู", "ุตูุน ููุตู ูู ุตูุฑุฉ/ููุตู ุจุงูุฑุฏ ุนูู ุงููุณุงุฆุท."),
        (".ูุนูููุงุช ุงูููุตู", "ุฌูุจ ูุนูููุงุช ุญุฒูุฉ ุงูููุตูุงุช."),
        (".ุชู <ุฑุงุจุท>", "ุชุญููู ููุฏูู ุชูู ุชูู ุจุฏูู ุนูุงูุฉ ูุงุฆูุฉ."),
    ],
    "ุงูุฐูุงุก ุงูุงุตุทูุงุนู": [
        (".ุฐูุงุก <ูุต/ุจุงูุฑุฏ>", "ุฑุฏ ุฐูู ูุฎุชุตุฑโูุซุงู: .ุฐูุงุก ููู ุญุงูู โ 'ุจุฎูุฑ ุงูุญูุฏ ููู!'."),
        (".ุชุฑุฌู <ูุบุฉ> [ูุต/ุจุงูุฑุฏ]", "ุชุฑุฌูุฉ ุฐููุฉ ุนุจุฑ Google (gpytranslate/deep-translator)."),
        (".ูุดู_ูุบุฉ [ูุต/ุจุงูุฑุฏ]", "ูุดู ูุบุฉ ุงููุต ุชููุงุฆููุง."),
        (".ุชูุฎูุต [ุนุฏุฏ_ุงูุฌูู] (ุจุงูุฑุฏ)", "ุชูุฎูุต ุณุฑูุน ูููุต ุฅูู ุนุฏุฏ ุฌูู ูุญุฏุฏ."),
    ],
    "ุฃุฏูุงุช ุงููููุงุช ูุงููุฌููุนุงุช": [
        (".ูุงุฆูู ุฌููุน ุงููููุงุช", "ุนุฑุถ ูุงุฆูุฉ ุงููููุงุช ุงูุนุงูุฉ/ุงูุฎุงุตุฉ."),
        (".ูุงุฆูู ุงููููุงุช ุงููุดุฑู ุนูููุง", "ุนุฑุถ ุงููููุงุช ุงูุชู ุฃูุช ูุดุฑู ูููุง."),
        (".ูุงุฆูู ูููุงุชู", "ุนุฑุถ ุงููููุงุช ุงูุชู ุฃูุช ูุงูููุง."),
        (".ูุงุฆูู ุฌููุน ุงููุฌููุนุงุช", "ุนุฑุถ ุฌููุน ุงููุฌููุนุงุช (ุงูุนุงุฏูุฉ/ุงูุฎุงุฑูุฉ)."),
        (".ูุงุฆูู ูุฌููุนุงุช ุงุฏูุฑูุง", "ุนุฑุถ ุงููุฌููุนุงุช ุงูุชู ุฃูุช ูุดุฑู ูููุง."),
        (".ูุงุฆูู ูุฑูุจุงุชู", "ุนุฑุถ ุงููุฌููุนุงุช ุงูุชู ุฃูุช ูุงูููุง."),
        (".ูุดู ุงููุฌููุนุฉ [reply/ID]", "ูุดู ูุนูููุงุช ูุชูุฏูุฉ ุนู ูุฌููุนุฉ/ููุงุฉ."),
    ],
    "ุงูุฅุฏุงุฑุฉ": [
        (".ุญุธุฑ [reply/ID/@]", "ุญุธุฑ ูุณุชุฎุฏู ูู ุงููุฌููุนุฉ."),
        (".ุทุฑุฏ [reply/ID/@]", "ุทุฑุฏ ูุณุชุฎุฏู ูู ุงููุฌููุนุฉ."),
        (".ุชูููุฏ [reply/ID/@]", "ุชูููุฏ ุฅุฑุณุงู ุงูุฑุณุงุฆู ููุณุชุฎุฏู."),
        (".ุงูุบุงุก ุงูุญุธุฑ [reply/ID/@]", "ุฅูุบุงุก ุงูุญุธุฑ."),
        (".ุงูุบุงุก ุงูุชูููุฏ [reply/ID/@]", "ุฅูุบุงุก ุงูุชูููุฏ."),
    ],
}
SECTIONS_AR = list(COMMANDS_AR.keys())

COMMANDS_EN = {
    "Statistics": [
        (".stats", "Show account statistics: users, groups, channels, bots."),
        (".myinfo", "Detailed info: private chats, groups, channels, admins, unread."),
    ],
    "Storage": [
        (".enable_storage", "Create and enable a storage mega-group for private forwards."),
        (".disable_storage", "Disable storage and remove local group binding."),
    ],
    "Auto Replies": [
        (".add_reply + key + text", "Add an auto-reply for a specific key."),
        (".replies", "List all stored replies."),
        (".enable_here", "Enable auto replies in current group."),
        (".disable_here", "Disable auto replies in current group."),
    ],
    "AFK & Custom Replies": [
        (".afk_on", "Turn on automatic private replies."),
        (".custom_on", "Enable custom replies by triggers."),
        (".afk_off", "Disable both AFK and custom replies."),
        (".reply_template", "Set a template message (by replying)."),
        (".reply <text>", "Add a custom reply for a trigger (reply to trigger)."),
        (".del_reply", "Delete a custom reply (reply to the trigger message)."),
        (".allow", "Allow a private chat from AFK restrictions."),
        (".disallow", "Remove allowance for a private chat."),
    ],
    "Games": [
        (".dart [1-6] | ๐ฏ", "Dart game."),
        (".dice [1-6] | ๐ฒ", "Dice game."),
        (".basket [1-5] | ๐", "Basketball."),
        (".ball [1-5] | โฝ๏ธ", "Football."),
        (".slot [1-64] | ๐ฐ", "Slot machine."),
        (".gym", "Gym animation."),
        (".truth_dare", "Open Truth/Dare menu."),
        (".dare", "Get a random dare."),
        (".truth", "Get a random truth."),
    ],
    "Media & Tools": [
        (".youtube <query>", "Find the first matching YouTube video."),
        (".sticker", "Create a sticker from an image/sticker (reply)."),
        (".sticker_info", "Get sticker pack info."),
        (".tiktok <link>", "Download TikTok video without watermark."),
    ],
    "AI": [
        (".ai <text/reply>", "Smart short reply. Example: .ai how are you โ 'Fine, thanks!'."),
        (".translate <lang> [text/reply]", "Smart translation via Google."),
        (".detect_lang [text/reply]", "Detect language."),
        (".summarize [n] (reply)", "Quick summarization to n sentences."),
    ],
    "Channels & Groups Tools": [
        (".list channels_all", "List all channels."),
        (".list channels_admin", "Channels you admin."),
        (".list channels_owner", "Your channels (owner)."),
        (".list groups_all", "All groups."),
        (".list groups_admin", "Groups you admin."),
        (".list groups_owner", "Groups you own."),
        (".inspect_group [reply/ID]", "Inspect group/channel info."),
    ],
    "Administration": [
        (".ban [reply/ID/@]", "Ban a user from group."),
        (".kick [reply/ID/@]", "Kick a user from group."),
        (".restrict [reply/ID/@]", "Restrict a user from sending messages."),
        (".unban [reply/ID/@]", "Unban user."),
        (".unrestrict [reply/ID/@]", "Remove restrictions."),
    ],
}
SECTIONS_EN = list(COMMANDS_EN.keys())

def build_menu_text_ar():
    return HEADER_AR + "ุงุฎุชุฑ ูุณููุง ูู ุงูุฃุฒุฑุงุฑ ุฃุฏูุงู ูุนุฑุถ ุฃูุงูุฑู ูุน ุงูุดุฑุญ.\n" + FOOTER_AR

def build_menu_text_en():
    return HEADER_EN + "Pick a section from the buttons below to view its commands and descriptions.\n" + FOOTER_EN

def build_buttons(prefix, sections, english=False):
    rows = []
    row = []
    for idx, title in enumerate(sections):
        row.append(Button.inline(title, data=f"{prefix}:idx:{idx}".encode()))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([Button.inline("Show All" if english else "ุนุฑุถ ุงููู", data=f"{prefix}:ALL".encode())])
    return rows

def build_section_text_ar(title):
    items = COMMANDS_AR.get(title, [])
    lines = "\n".join([f"โข {cmd}\n  โคท {desc}" for cmd, desc in items])
    return HEADER_AR + f"ใ {title} ใ\n" + lines + FOOTER_AR

def build_section_text_en(title):
    items = COMMANDS_EN.get(title, [])
    lines = "\n".join([f"โข {cmd}\n  โคท {desc}" for cmd, desc in items])
    return HEADER_EN + f"ใ {title} ใ\n" + lines + FOOTER_EN

# Only register if bot client exists
if bot is not None:
    @bot.on(events.InlineQuery)
    async def inline_query_handler(event):
        q = (event.query or "").strip().lower()
        if q in ("", "ูุณุงุนุฏุฉ", "ุงูุงูุงูุฑ", "ุงูุงูุฑ"):
            await event.answer([
                event.builder.article(
                    title="ูุงุฆูุฉ ุงููุณุงุนุฏุฉ โข FLEX",
                    text=build_menu_text_ar(),
                    buttons=build_buttons("inline_help_ar", SECTIONS_AR, english=False),
                    description="ุฃูุชุญ ูุงุฆูุฉ ุงูุฃูุณุงู ุจุฃุฒุฑุงุฑ ุชููู",
                )
            ], cache_time=0)
        elif q in ("help", "commands", "assist"):
            await event.answer([
                event.builder.article(
                    title="Help Menu โข FLEX",
                    text=build_menu_text_en(),
                    buttons=build_buttons("inline_help_en", SECTIONS_EN, english=True),
                    description="Open sectioned command menu with navigation buttons",
                )
            ], cache_time=0)

    @bot.on(events.CallbackQuery)
    async def inline_help_callback(event):
        data = (event.data or b"").decode()
        if data.startswith("inline_help_ar:"):
            parts = data.split(":")
            if len(parts) == 2 and parts[1] in {"MENU", "ALL"}:
                if parts[1] == "MENU":
                    await event.edit(build_menu_text_ar(), buttons=build_buttons("inline_help_ar", SECTIONS_AR, english=False))
                else:
                    await event.edit("ุฌุงุฑู ุนุฑุถ ุฌููุน ุงูุฃูุณุงู...")
                    text = HEADER_AR + "\n".join(
                        ["\n".join([f"ใ {title} ใ", "\n".join([f"โข {c}\n  โคท {d}" for c, d in COMMANDS_AR[title]]), SEPARATOR]) for title in SECTIONS_AR]
                    ) + FOOTER_AR
                    await bot.send_message(event.chat_id, text)
                    await event.answer("ุชู ุงูุฅุฑุณุงู.")
                return
            if len(parts) == 3 and parts[1] == "idx":
                idx = int(parts[2])
                if not (0 <= idx < len(SECTIONS_AR)):
                    await event.answer("ุฎุงุฑุฌ ุงููุทุงู.", alert=True)
                    return
                title = SECTIONS_AR[idx]
                await event.edit(build_section_text_ar(title), buttons=build_buttons("inline_help_ar", SECTIONS_AR, english=False))
                await event.answer(f"ุชู ูุชุญ ูุณู: {title}")
        elif data.startswith("inline_help_en:"):
            parts = data.split(":")
            if len(parts) == 2 and parts[1] in {"MENU", "ALL"}:
                if parts[1] == "MENU":
                    await event.edit(build_menu_text_en(), buttons=build_buttons("inline_help_en", SECTIONS_EN, english=True))
                else:
                    await event.edit("Showing all sections...")
                    text = HEADER_EN + "\n".join(
                        ["\n".join([f"ใ {title} ใ", "\n".join([f"โข {c}\n  โคท {d}" for c, d in COMMANDS_EN[title]]), SEPARATOR]) for title in SECTIONS_EN]
                    ) + FOOTER_EN
                    await bot.send_message(event.chat_id, text)
                    await event.answer("Sent.")
                return
            if len(parts) == 3 and parts[1] == "idx":
                idx = int(parts[2])
                if not (0 <= idx < len(SECTIONS_EN)):
                    await event.answer("Out of range.", alert=True)
                    return
                title = SECTIONS_EN[idx]
                await event.edit(build_section_text_en(title), buttons=build_buttons("inline_help_en", SECTIONS_EN, english=True))
                await event.answer(f"Opened: {title}")